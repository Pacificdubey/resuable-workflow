name: Reusable Semantic Release Workflow

on:
  workflow_call:
    outputs:
      next_tag:
        description: "Next version tag"
        value: ${{ jobs.release.outputs.next_tag }}
        
permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: read

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      next_tag: ${{ steps.semantic_release.outputs.NEXT_TAG }}

    steps:
      - name: Checkout reusable workflow repository (to get release config)
        uses: actions/checkout@v4
        with:
          repository: Pacificdubey/resuable-workflow     # Replace with your reusable workflow repository
          path: config
          
      - run : |
             ls -la 
      #      mv config/release.config.js .

      - name: Checkout code (the main repository where the release will happen)
        uses: actions/checkout@v4
        with:
          path: main-repo

      - run : |
            ls -la
           

        
      - name: Fetch all history and tags
        run: git fetch --prune --unshallow || git fetch --prune
        
      - name: Ensure branch is up-to-date
        run: git reset --hard origin/${{ github.ref_name }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm install --no-save \
            semantic-release@22.0.12 \
            @semantic-release/commit-analyzer@11.1.0 \
            conventional-changelog-conventionalcommits@7.0.2 \
            @semantic-release/exec@6.0.3 \
            @semantic-release/git@10.0.1 \
            @semantic-release/release-notes-generator@12.1.0 \
            @semantic-release/changelog@6.0.3
            npx semantic-release  || true

      - name: Get Version Output
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # capture the output
          # Capture the last release tag and next release tag using git
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "LAST_TAG=$LAST_TAG"

          # If semantic-release generates a new tag, capture it
          if [ -f ".nextRelease" ]; then
            NEXT_TAG=$(cat .nextRelease)
            echo "New release tag: $NEXT_TAG"
            echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_OUTPUT
          else
            # If no new release is generated, fallback to the last tag
            echo "No new release, using last tag: $LAST_TAG"
            echo "NEXT_TAG=$LAST_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Use Version
        run: echo "Version to use:${{ env.NEXT_TAG }}"
