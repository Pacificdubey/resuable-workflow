name: Semantic Versioning

on:
  workflow_call:
    inputs:
      major:
        required: false
        type: boolean
        default: false
      minor:
        required: false
        type: boolean
        default: false
      patch:
        required: false
        type: boolean
      version_file_path:
        required: true
        type: string
    outputs:
      new_version:
        description: "The newly calculated semantic version"
        value: ${{ jobs.versioning.outputs.new_version }}

permissions:
  contents: write  # This allows the workflow to push changes

jobs:
  versioning:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.calc_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get last committer's email
        id: get-email
        run: |
          EMAIL=$(git log -1 --pretty=format:'%ae')
          echo "Last committer's email: $EMAIL"
          echo "COMMITTER_EMAIL=$EMAIL" >> $GITHUB_ENV
          
      # git configuration
      - name: Configure Git
        run: |
          git config --global user.email "${{ env.COMMITTER_EMAIL }}"
          git config --global user.name "${{ github.actor }}"

      #- name: Pull latest changes
       # run: git pull origin ${{ github.head_ref }} --rebase


      - name: Calculate new version
        id: calc_version
        env:
          IS_MAIN_BRANCH: ${{ github.ref == 'refs/heads/main' }}
          IS_PR_MERGED_TO_MAIN: ${{ github.event_name == 'pull_request' && github.event.pull_request.merged && github.event.pull_request.base.ref == 'main' }}
        run: |
         VERSION=$(tail -n 1 ${{ inputs.version_file_path }})
         if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
         echo "Error: Invalid version format - $VERSION"
         exit 1
         fi

         IFS='.' read -ra ADDR <<< "$VERSION"
         if [[ "$IS_MAIN_BRANCH" == "true" || "$IS_PR_MERGED_TO_MAIN" == "true" ]]; then
         if ${{ inputs.major }}; then
          ADDR[0]=$((ADDR[0]+1))
           ADDR[1]=0
           ADDR[2]=0
         elif ${{ inputs.minor }}; then
           ADDR[1]=$((ADDR[1]+1))
           ADDR[2]=0
          elif ${{ inputs.patch }}; then
          ADDR[2]=$((ADDR[2]+1))
         fi
         NEW_VERSION="${ADDR[0]}.${ADDR[1]}.${ADDR[2]}"
         echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
         echo "# <MAJOR>.<MINOR>.<PATCH>" > ${{ inputs.version_file_path }}
         echo "$NEW_VERSION" >> ${{ inputs.version_file_path }}
         else
           NEW_VERSION=$VERSION
          fi
             echo "version=$NEW_VERSION" >> $GITHUB_ENV
             echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Commit new version
        if: env.NEW_VERSION && (github.ref == 'refs/heads/main' || github.event.pull_request.merged)
        run: |
                git add version.txt
                git commit -m "Update version to ${{ steps.calc_version.outputs.new_version }}"
                # Explicitly push to the main branch
                git push origin main
